package com.stackroute.bookingticketservice.Services;

import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;
import com.razorpay.Refund;
import com.stackroute.bookingticketservice.Exception.CustomizedException;
import com.stackroute.bookingticketservice.Interfaces.BookTicketsInterface;
import com.stackroute.bookingticketservice.Models.BookTickets;
import com.stackroute.bookingticketservice.Models.RegisterShows;
import com.stackroute.bookingticketservice.RabbitMq.MqConfigure;
import com.stackroute.bookingticketservice.RabbitMq.ProducerDataForBookingTickets;
import com.stackroute.bookingticketservice.RabbitMq.ProducerDataForCancellationTicekets;
import com.stackroute.bookingticketservice.Repositories.BookTicketsRepo;
import com.stackroute.bookingticketservice.Repositories.RegisterRepo;
import org.json.JSONObject;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class BookTicketsService implements BookTicketsInterface {

    @Autowired
    ProducerDataForBookingTickets booking;

    @Autowired
    ProducerDataForCancellationTicekets cancellation;

    @Autowired
    BookTicketsRepo repository;

    @Autowired
    RabbitTemplate template;

    @Autowired
    RegisterRepo registerRepo;

    @Autowired
    BookTicketsInterface interfaceObject;           //To get alloted seats by calling method internally before user booking seats

    @Override
    public Optional<Object> bookTicketForShow(BookTickets bookTickets) {
        final String stamp="EVENTO-BOOK-ID-";
        if(repository.count()==0)
            bookTickets.set_id(stamp+1);
        else if(!registerRepo.existsById(bookTickets.getShowId()))
            throw new CustomizedException("No such Show ID is found..");
        else {
            List<String> ids = repository.findAll().stream().map(object -> object.get_id()).collect(Collectors.toList());
            int lastId=ids.stream().map(element->Integer.valueOf(element.split("-")[3])).sorted().max(Integer::compareTo).get();
            bookTickets.set_id(stamp+(lastId+1));                                                       //Setting bookingId as autogenerated value
        }
        bookTickets.setEventId(registerRepo.findById(bookTickets.getShowId()).get().getEventId());      //Setting eventId for the particular show
        bookTickets.setShowId(bookTickets.getShowId());                                                 //Setting showId for the particular show
        bookTickets.setTheatreId(registerRepo.findById(bookTickets.getShowId()).get().getTheatreId());  //Setting theatretId for the particular show
        bookTickets.setPaymentId(bookTickets.getPaymentId());                                           //Setting payment ID
        bookTickets.setUserEmailId(bookTickets.getUserEmailId());                                       //Setting end user email ID
        bookTickets.setEventDate(registerRepo.findById(bookTickets.getShowId()).get().getEventDate());  //Setting eventDate for the particular show
        bookTickets.setEventTime(registerRepo.findById(bookTickets.getShowId()).get().getEventTime());  //Setting eventTime for the particular show
        bookTickets.setBookingDate(LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));         //Setting current dMate of booking ticket
        bookTickets.setBookingTime(LocalTime.now().format(DateTimeFormatter.ofPattern("hh:mm a")));              //Setting current time of booking ticket
        List<String> allotedSeats=interfaceObject.getAllBookedSeatsForParticularShow(bookTickets.getShowId());   //Calling method internally to check user has picked invalid seats
        if(bookTickets.getSeatNumbers().stream().anyMatch(allotedSeats::contains))                               //Condition to check whether user has picked any invalid seat
            throw new CustomizedException("Seat has been already picked by another user..");
        else {
            bookTickets.setTicketFair(bookTickets.getSeatNumbers().size() * 120.00);                     //Setting fair value
            RegisterShows tempObj=registerRepo.findById(bookTickets.getShowId()).get();
            bookTickets.getSeatNumbers().stream().forEach(element->allotedSeats.add(element));           //Adding seats to the list which picked by end user
            tempObj.setBookedSeats(allotedSeats);
            registerRepo.save(tempObj);                                                                  //Saving object after modification
        }
        interfaceObject.rabbitMqDataProducerForBookingTickets(bookTickets);                                                //Calling method to produce data in RabbitMq
        return Optional.ofNullable(repository.save(bookTickets));
    }

    @Override
    public BookTickets getShowDetailsById(String bookId) {
        if(!repository.existsById(bookId))
            throw new CustomizedException("Invalid booking ID found..");
        else
            return repository.findById(bookId).get();
    }

    @Override
    public List<BookTickets> getShowDetailsByEmail(String userEmail) {
        List<BookTickets> list=repository.findByUserEmailId(userEmail);
        if(list.size()==0)
            throw new CustomizedException("You haven't booked any tickets from your account..");
        return list;
    }

    @Override
    public List<String> getAllBookedSeatsForParticularShow(int showId) {
        List<String> allotedSeats=registerRepo.findById(showId).get().getBookedSeats();       //Collecting list of all booked seats lists by particular show ID
        return allotedSeats;
    }

    @Override
    public String bookingCancellation(String bookingId) throws RazorpayException {
        BookTickets bookTickets=repository.findById(bookingId).get();                          //Fetching particular booking details by booking ID
        LocalDateTime scheduledTime=bookTickets.getEventTime().atDate(bookTickets.getEventDate());
        LocalDateTime currentDateTime=LocalTime.now().atDate(LocalDate.now());
        Duration duration=Duration.between(currentDateTime,scheduledTime);
        //Conditions to cancel the particular ticket ( Shows can't be cancelled before 7 hours.. )
        if(duration.toHours()>=7) {
            List<String> bookedSeatsByUser = bookTickets.getSeatNumbers();                           //Fetching booked Seats by user for the particular booking ID
            RegisterShows show = registerRepo.findById(bookTickets.getShowId()).get();               //Fetching particular event details by ID
            //First Collecting all booked Seats for particular show then checking if user selected is preset in all booked seats if so then ignore it
            show.setBookedSeats(interfaceObject.getAllBookedSeatsForParticularShow(show.get_id()).stream().filter(seat -> !bookedSeatsByUser.contains(seat)).collect(Collectors.toList()));
            registerRepo.save(show);                                                                 //After removing all cancelled seats from booked seats saving the object
            //Payment Refund Process begins from here
            RazorpayClient razorpay = new RazorpayClient("rzp_test_B2hboJXaufQJZD", "h83cQ6lheLbmEC5jjBEBoA4r");        //Declaring key ID and secret key
            JSONObject refundRequest = new JSONObject();
            refundRequest.put("amount", razorpay.payments.fetch(bookTickets.getPaymentId()).get("amount").toString());      //Setting up refund amount
            refundRequest.put("speed", "normal");                                                    //Setting up payment speed ( Instant or Normal )
            Refund refuneded=razorpay.payments.refund(bookTickets.getPaymentId(),refundRequest);        //Calling Razor method by passing Payment ID and Refund Request to refund
            interfaceObject.rabbitMqDataProducerForCancellingTickets(bookTickets,refuneded);         //Calling Cancellation method to produce data to Rabbit Mq
            repository.deleteById(bookingId);                                                        //Deleting Booking ID from Database
            return "Ticket(s) has/have been cancelled and Amount will be refunded soon..";
        }
        else
            throw new CustomizedException("Cancellation won't be available for the last 7 hours of any shows..");
    }

    @Override
    public void rabbitMqDataProducerForBookingTickets(BookTickets bookTickets) {
        booking.set_id(bookTickets.get_id());
        booking.setEventId(bookTickets.getEventId());
        booking.setTheatreId(bookTickets.getTheatreId());
        booking.setShowId(bookTickets.getShowId());
        booking.setPaymentId(bookTickets.getPaymentId());
        booking.setUserEmailId(bookTickets.getUserEmailId());
        String eventDate=registerRepo.findById(bookTickets.getShowId()).get().getEventDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
        booking.setEventDate(eventDate);
        String eventTime=registerRepo.findById(bookTickets.getShowId()).get().getEventTime().format(DateTimeFormatter.ofPattern("hh:mm a"));
        booking.setEventTime(eventTime);
        booking.setBookingDate(LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));
        booking.setBookingTime(LocalTime.now().format(DateTimeFormatter.ofPattern("hh:mm a")));
        booking.setSeatNumbers(bookTickets.getSeatNumbers());
        booking.setTicketFair(bookTickets.getTicketFair());
        template.convertAndSend(MqConfigure.EXCHANGE,MqConfigure.ROUTING_KEY1, booking);              //Producing booking object to RabbitMq Queue
    }

    @Override
    public void rabbitMqDataProducerForCancellingTickets(BookTickets bookTickets, Refund refund) {
        cancellation.set_id(bookTickets.get_id());
        cancellation.setRefundId(refund.get("id"));
        cancellation.setEventId(bookTickets.getEventId());
        cancellation.setTheatreId(bookTickets.getTheatreId());
        String eventDate=registerRepo.findById(bookTickets.getShowId()).get().getEventDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
        cancellation.setEventDate(eventDate);
        String eventTime=registerRepo.findById(bookTickets.getShowId()).get().getEventTime().format(DateTimeFormatter.ofPattern("hh:mm a"));
        cancellation.setEventTime(eventTime);
        cancellation.setUserEmailId(bookTickets.getUserEmailId());
        cancellation.setSeatNumbers(bookTickets.getSeatNumbers());
        cancellation.setCancelledDate(LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));
        cancellation.setCancelledTime(LocalTime.now().format(DateTimeFormatter.ofPattern("hh:mm a")));
        cancellation.setRefundStatus(refund.get("status"));
        cancellation.setRefundedAmount(((Integer) refund.get("amount")).intValue()/100);                      //Converting Object into Integer
        template.convertAndSend(MqConfigure.EXCHANGE,MqConfigure.ROUTING_KEY2, cancellation);              //Producing cancellation object to RabbitMq Queue
    }
}
